Server:
    ✔ Initialize sockets for all server configs @done (10/23/2025, 3:14:47 AM)
    ✔ Event loop (epoll/select/poll) @done (10/23/2025, 3:14:48 AM)
    ✔ Accept new connections → create Client objects @done (10/23/2025, 3:14:49 AM)
    ✔ Monitor client sockets for read/write events @done (10/23/2025, 3:14:52 AM)
    ☐ Cleanup closed connections

Parser:
    ✔ method @done (10/23/2025, 3:14:53 AM)
    ✔ path @done (10/23/2025, 3:14:54 AM)
    ✔ query @done (10/23/2025, 3:14:54 AM)
    ✔ version @done (10/23/2025, 3:14:56 AM)
    ✔ headers @done (10/23/2025, 3:14:55 AM)

Response Maker Class:
    ✔ First line @done (10/28/2025, 11:53:39 AM)
    ✔ Headers @done (10/28/2025, 11:53:41 AM)
    ✔ Error Page / body @done (10/28/2025, 11:53:42 AM)
    ✔ Load error.html depending on the error code @done (10/28/2025, 11:53:46 AM)
    ✔ Format http response @done (10/28/2025, 11:53:48 AM)

Client:
    ☐ Add timeout logic
    ☐ State machine (READING_REQUEST / PROCESSING / SENDING_RESPONSE)
    ☐ Trigger RequestHandler

Request Handler:
    ☐ Link the different parts
    ☐ Parser → RouteMatcher → Resolver → Handler → Response
    ☐ Error handling at each step
    ☐ Return Response to Client

Route Matcher:
input: requtest + config
    ☐ find server
    ☐ find location
    ☐ check for errors using the location config

"The ResourceResolver determines WHAT to do, then delegates to specialized handlers"
Resource Resolver:
    ☐ Maps request paths to filesystem paths
    ☐ Call the appropriate handler

Static File Handler:
    ☐ Serve files from filesystem
    ☐ Handle MIME types
    ☐ Implement directory listing (if enabled)
    ☐ Handle index files

CGI Handler:
    ☐ Execute CGI scripts
    ☐ Set environment variables
    ☐ Handle CGI timeouts
    ☐ Process CGI output

FileUploadHandler:
    ☐ Handle multipart/form-data
    ☐ Save uploaded files to designated directory
    ☐ Make file size limits